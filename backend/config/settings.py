# backend/config/settings.py

"""
Django settings for the config project.

Generated by 'django-admin startproject' using Django X.Y.Z.

For more information on this file, see
https://docs.djangoproject.com/en/X.Y/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/X.Y/ref/settings/
"""

import os
from pathlib import Path
import dj_database_url
from dotenv import load_dotenv

# --- Environment Variables ---
# Load environment variables from .env file (primarily for local development)
# Ensure this runs before variables are accessed.
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# --- Core Settings ---

# SECURITY WARNING: keep the secret key used in production secret!
# Use environment variable for production, provide a *safe* default for local dev
# IMPORTANT: Generate a NEW key for production and set it in Render Env Vars.
#            DO NOT use this default key or the 'django-insecure...' key in production.
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'local-dev-secret-key-placeholder-replace-me-if-you-care')

# SECURITY WARNING: don't run with debug turned on in production!
# Reads DEBUG value from environment ('True' or 'False'), defaults to True for local dev
DEBUG = os.environ.get('DEBUG', 'True') == 'True'

# Hosts allowed to serve the site. Crucial for production security.
# Read from comma-separated env var, default to local hosts for dev.
# Example for Render/Vercel: 'your-render-backend.onrender.com,your-vercel-frontend.vercel.app'
ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', '127.0.0.1,localhost').split(',')

# --- Application Definition ---

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles', # Required for Admin and static files in general

    # Third-party apps
    'rest_framework',
    'rest_framework.authtoken', # Token Authentication
    'corsheaders',              # CORS handling
    'whitenoise',               # Static file serving (needed if using runserver locally with static)

    # Local apps
    'api.apps.ApiConfig',       # Use explicit AppConfig for clarity
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # Whitenoise Middleware - Place high up, right after SecurityMiddleware
    # To serve static files efficiently, especially in production
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    # CORS Middleware - Place before views that need CORS headers (e.g., CommonMiddleware)
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware', # Keep for Admin/Session Auth if used
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [], # No top-level template dir needed for API-focused app
        'APP_DIRS': True, # Allows finding templates within apps (e.g., for Admin)
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# --- Database ---
# https://docs.djangoproject.com/en/X.Y/ref/settings/#databases
# Uses dj-database-url to parse the DATABASE_URL environment variable.
# Render sets DATABASE_URL automatically for its managed PostgreSQL.
# For local development, if DATABASE_URL is NOT in .env, it falls back to SQLite.
DATABASES = {
    'default': dj_database_url.config(
        # Fallback to SQLite in the base directory if DATABASE_URL not set
        default=f'sqlite:///{BASE_DIR / "db.sqlite3"}',
        conn_max_age=600 # Optional: connection pooling time (seconds)
    )
}


# --- Password Validation ---
# https://docs.djangoproject.com/en/X.Y/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# --- Internationalization ---
# https://docs.djangoproject.com/en/X.Y/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC' # Use UTC for consistency, handle timezone conversions on frontend if needed
USE_I18N = True
USE_TZ = True # Recommended for handling timezones correctly


# --- Static Files (CSS, JavaScript, Images) ---
# https://docs.djangoproject.com/en/X.Y/howto/static-files/
# Whitenoise configuration for serving static files efficiently in production

STATIC_URL = '/static/' # URL to access static files
STATIC_ROOT = BASE_DIR / 'staticfiles' # Directory where collectstatic gathers files for deployment

# Whitenoise Storage - Compresses files and adds unique hashes for caching
# Use the modern STORAGES setting (Django 4.2+)
STORAGES = {
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}
# For older Django versions (before 4.2), use:
# STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# --- Default Primary Key Field Type ---
# https://docs.djangoproject.com/en/X.Y/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# --- REST Framework Settings ---
# https://www.django-rest-framework.org/api-guide/settings/
REST_FRAMEWORK = {
    # Use TokenAuthentication globally
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        # Consider SessionAuthentication if you need browser session login (e.g., for Browsable API)
        # 'rest_framework.authentication.SessionAuthentication',
    ],
    # Require authentication for all API endpoints by default
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    # Optional: Add pagination, throttling, etc. globally if desired
    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    # 'PAGE_SIZE': 10
}


# --- CORS (Cross-Origin Resource Sharing) Settings ---
# https://github.com/adamchainz/django-cors-headers
# Read allowed origins from comma-separated env var.
# IMPORTANT: Set this correctly in Render Env Vars for your Vercel frontend URL.
# Example for Render: 'https://your-vercel-app.vercel.app'
CORS_ALLOWED_ORIGINS = os.environ.get('CORS_ALLOWED_ORIGINS', 'http://localhost:3000,http://127.0.0.1:3000').split(',')

# Allow cookies/auth tokens to be sent in cross-origin requests
CORS_ALLOW_CREDENTIALS = True

# Optional: Allow specific headers if needed (defaults are usually sufficient)
# CORS_ALLOW_HEADERS = list(default_headers) + ['my-custom-header']

# Optional: Allow specific methods if needed (defaults are usually sufficient)
# CORS_ALLOW_METHODS = list(default_methods) + ['PATCH']


# --- Logging Configuration (Enhanced) ---
# Basic configuration to log INFO and higher level messages to the console
# Render captures console output, so this is usually sufficient for deployment logs.
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False, # Keep Django's default loggers
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler', # Output logs to stderr/stdout
            'formatter': 'simple', # Use the simple format for console
        },
    },
    'root': { # Catch-all logger
        'handlers': ['console'],
        # Set level based on DEBUG: INFO for production, DEBUG for local dev
        'level': 'DEBUG' if DEBUG else 'INFO',
    },
    'loggers': { # Configure specific loggers if needed
        'django': { # Configure Django's internal logs
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'), # Default to INFO, override if needed
            'propagate': False, # Don't send django logs to the root logger too
        },
         'api': { # Configure logs specifically from your 'api' app
            'handlers': ['console'],
            'level': 'DEBUG' if DEBUG else 'INFO', # More verbose for api app in dev
            'propagate': False,
        },
    }
}

# --- Security Settings (Production Enhancements) ---
# These settings are often more critical when DEBUG = False

if not DEBUG:
    # Enforce HTTPS (if your server/proxy handles TLS termination)
    # SECURE_SSL_REDIRECT = True # Handled by Render/Vercel typically
    # Set session cookie to be secure (only sent over HTTPS)
    SESSION_COOKIE_SECURE = True
    # Set CSRF cookie to be secure (only sent over HTTPS)
    CSRF_COOKIE_SECURE = True # Important if using Session Auth or Forms

    # Optional: HSTS (HTTP Strict Transport Security) - tells browsers to only use HTTPS
    # Use with caution - ensure HTTPS is fully working first
    # SECURE_HSTS_SECONDS = 31536000 # 1 year
    # SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    # SECURE_HSTS_PRELOAD = True

    # Optional: Other security headers (check browser compatibility)
    # SECURE_CONTENT_TYPE_NOSNIFF = True
    # SECURE_BROWSER_XSS_FILTER = True
    # X_FRAME_OPTIONS = 'DENY' # Already default